 SUBROUTINE intrf8l(ndime,ndofe,ng,nstre,nn,il,rprop,weigh,shape,  &
                    deriv,jac,stra0,stran,stres,epdef,sedef,       &
                    bmsig,x,v,lbd,lb0,u,llbd,istop,ielem,isotro,visco,plast)
 !***********************************************************************
 !
 !****this routine compute the internal nodal forces for element no. 8
 !    2-3 node beam element
 !***********************************************************************
 IMPLICIT NONE
 !***  routine parameters
 INTEGER (kind=4) ndime,ndofe,ng,nstre,nn,il,istop,ielem
 REAL (kind=8) rprop(:),shape(nn,ng),deriv(nn,ng),weigh(ng),             &
               jac(ng),stra0(nstre,ng),stran(nstre,ng),stres(nstre,ng),  &
               epdef(ng),sedef(ng),bmsig(ndofe,nn),x(3,nn),              &
               v(6,nn),lbd(3,3,nn),lb0(3,3,nn),u(6,nn),llbd(3,3,nn)
 LOGICAL :: isotro,visco,plast
 !***  local variables
 INTEGER (kind=4) n,g,k,nv
 REAL (kind=8) iro(3),vg(6),t(6),st(6),                          &
               bts(ndofe,nn),lb(3,3,nn),dx(3,ng),vb(6,nn),          &
               bm(6,nn,nstre,ng),vst(nstre),theta(3,nn),lbg(3,3,ng)

 REAL (kind=8),SAVE :: h(3) = (/0d0,0d0,0d0/)

 ! necesito
 !  lambda_0 en los puntos de integración

 !     compute the local cartesian system
 IF(il == 0) THEN  !same systems
   lb = lbd             !local system = global system
   vb = v               !local velocities = global velocities
 ELSE              !relative systems
   DO n=1,nn       !for each node
     k = MIN(il,n)
     lb(1:3,1:3,n) = MATMUL(lbd(1:3,1:3,n),llbd(1:3,1:3,k))     !element nodal local systems
     lb0(1:3,1:3,n) = MATMUL(lb0(1:3,1:3,n),llbd(1:3,1:3,k))    !element nodal initial local systems
     vb(1:3,n) = v(1:3,n)                                       !translational velocities
     vb(4:6,n) = MATMUL(TRANSPOSE(llbd(1:3,1:3,k)),v(4:6,n))    !rotation velocities in element local system
   END DO
 END IF
 !     compute linear rotations
 DO n=1,nn
   u(4,n) = DOT_PRODUCT(lb0(:,3,n),lb(:,2,n))
   u(5,n) = DOT_PRODUCT(lb0(:,1,n),lb(:,3,n))
   u(6,n) = DOT_PRODUCT(lb0(:,2,n),lb(:,1,n))
 END DO
 ! compute B matrix at Gauss points
 lbg = 0d0
 DO g=1,ng
   ! initial "strains"
   t = stra0(:,g)
   DO n=1,nn
     lbg(:,:,g) = shape(n,g)*lb0(:,:,g) + lbg(:,:,g)      !esto es una aproximación pobre (pero no tiene mucha influencia aqui)
   END DO
   ! compute B matrix at Gauss points
   CALL bmatx8(nstre,nn,shape(:,g),deriv(:,g),jac(g),t,lbg(:,:,g),bm(:,:,:,g))
   !     compute actual angles and curvatures
   CALL proma1(stran(1,g),u,bm(1,1,1,g),1,nstre,ndofe*nn)
 END DO
 ! rotational inertia
 iro(1) =  rprop(4)-rprop(3)   !I3 - I2
 iro(2) =  rprop(2)-rprop(4)   !I1 - I3 =  I2
 iro(3) =  rprop(3)-rprop(2)   !I2 - I1 = -I3
 !     evaluates incremental and total stresses at gauss points
 IF( isotro )THEN
   DO g=1,ng
     DO k=1,nstre
       stres(k,g) = rprop(4+k)*stran(k,g)
     END DO
   END DO
   IF( visco )nv = 10
 ELSE
   CALL istg28(ng,nstre,stres,stran,sedef,rprop)
   sedef = 1d0
   IF( visco )nv = 25
 END IF
 bts = 0d0
 !     sums contribution to residual forces
 DO g=1,ng
   ! efecto giroscópico
   ! vg = MATMUL(vb,shape(1:nn,g))
   ! h(1) = iro(1)*vg(5)*vg(6)       ! w x h = w x (Iw)
   ! h(2) = iro(2)*vg(6)*vg(4)
   ! h(3) = iro(3)*vg(4)*vg(5)
   h=0d0
   IF( visco )THEN
     CALL proma1(vst,vb,bm(1,1,1,g),1,nstre,ndofe*nn)
     DO k=1,nstre
       stres(k,g) = stres(k,g) + rprop(nv+k)*vst(k)
     END DO
   END IF
   st = jac(g)*weigh(g)*stres(1:6,g)    !weighted stresses
   CALL proma3(bts,bm(1,1,1,g),st(1),ndofe*nn,nstre,.FALSE.)
   h  = jac(g)*weigh(g)*h               !weighted inertia
   DO n=1,nn
     bts(4:6,n)= bts(4:6,n) + shape(n,g)*h(1:3)
   END DO
 END DO
 !     transform to nodal system from beam local system
 DO n=1,nn
   bmsig(1:3,n) = bts(1:3,n)
   IF(il == 0) THEN
     bmsig(4:6,n) = bts(4:6,n)
   ELSE
     k = MIN(n,il)
     bmsig(4:6,n) = MATMUL(llbd(1:3,1:3,k),bts(4:6,n))
   END IF
 END DO
 RETURN
 END SUBROUTINE intrf8l
